\documentclass[a4paper,10pt]{article}
\usepackage{listings}
\usepackage{color}

\lstset{language=Java}
\lstset{breaklines=true, numbers=left}
\lstset{tabsize=4}

\definecolor{CommentColor}{rgb}{0,0.5,0} 
\definecolor{KeywordColor}{rgb}{0,0,0.5}

\lstset{commentstyle=\scriptsize\color{CommentColor}\itshape}
\lstset{keywordstyle=\scriptsize\color{KeywordColor}\bfseries}
\lstset{basicstyle=\scriptsize}
\lstset{identifierstyle=\scriptsize}
\lstset{stringstyle=\scriptsize}

% \lstset{basicstyle=\ttfamily}

\newcommand{\src}[1]{\lstinline[basicstyle=\normalsize\ttfamily,keywordstyle=\normalsize\ttfamily,identifierstyle=\normalsize\ttfamily]|#1|}

\newcommand{\short}{\item[Short]}
\newcommand{\why}{\item[Reason]}
\newcommand{\clients}{\item[Clients]}

\title{DockingFrames 1.0.6 - Transition}
\author{Benjamin Sigg}

\begin{document}

\maketitle
\tableofcontents
\newpage


\begin{abstract}
This document describes the most important changes between versions, and how developers should change their application in order to use new features. This document does not make any distinction between the core-library and the common-project. Not all changes are listed up in this document, only those enhancments which might be interesting for the majority of developers.
\end{abstract}

\section{Version 1.0.3}
Version 1.0.3 emphasizes on background enhancments. The API remains unchanged for most parts.
\subsection{Incompatibilities}
These changes break with the API from 1.0.2, clients must change their interfaces in order to work properly.

\subsubsection{DefaultKeyboardController}
\begin{description}
\short The class \src{DefaultkeyBoardController} has been renamed to \\\src{DefaultKeyboardController} 
\why The new name looks better
\clients Replace any occurrence of \src{DefaultkeyBoardController} to \\\src{DefaultKeyboardController}
\end{description}

\subsubsection{DefaultDockable/DefaultCDockable}
\begin{description}
 \short \src{DefaultDockable} and \src{DefaultCDockable} now have \src{BorderLayout} set as default \src{LayoutManager}
 \why \src{BorderLayout} is the most often used \src{LayoutManager}.
 \clients If another \src{LayoutManager} than \src{BorderLayout} is needed, set it up.
\end{description}

\subsubsection{CDockableListener}
\begin{description}
 \short \src{CDockableListener} divided into \\\src{CDockableStateListener} and \src{CDockablePropertyListener}
 \why \src{CDockableListener} was to big. Most clients either need information about the state, or about the properties of a \src{CDockable}. The case that both informations are needed is seldom.
 \clients Need to decide which listener they implement. Note that \\\src{CDockableAdapter} implements both listeners, but not all methods get invoked when the adapter is registered only as one kind of listener.
\end{description}

\subsubsection{FlapDockStation}
\begin{description}
 \short \src{FlapDockStation}s layout is stored in a new format. The xml format will do the transition automatically, but the \src{DataInput/OutputStream} will not work properly.
 \why the old format did not carry enough information
 \clients Store the layout in xml-format and load it again to do the transition.
\end{description}

\subsubsection{XML}
\begin{description}
 \short \src{XElement} now extends \\\src{XContainer}, and no longer \src{XAttribute}. \src{XAttribute} extends \src{XContainer} as well.
 \why An element of a xml file is not an attribute, that is now reflected in the class structure
 \clients May need to replace some occurrences of \src{XAttribute} by \src{XContainer}
\end{description}

\subsubsection{DockTheme}
\begin{description}
 \short The common-project uses its own set of \src{DockTheme}s. Each theme \src{XTheme} gets replaced by \src{CXTheme}
 \why The new themes make use of the new \src{ColorMap}
 \clients Should use the new themes when possible. The old themes will work, but the user will see less features.
\end{description}

\subsubsection{DockFactory}
\begin{description}
 \short \src{DockFactories} can now create any \src{Object} they want, and are no longer required to create \src{DockLayout}s. \src{DockLayout} has been converted into a class that wraps the \src{Object} that was created by a DockFactory
 \why All \src{DockLayout}s need to do the same things, hence clients would need to write the same code over and over again. Clients have now more freedom in how to implement \src{DockFactory}
 \clients Should remove all occurrences of \src{implements DockLayout} and the methods \src{set/getFactoryId} that were defined in \src{DockLayout}
\end{description}


\subsection{Features}
This is the set of new features.

\subsubsection{SplitDockStation}
\begin{description}
 \short The tree of elements of a \src{SplitDockStation} is now accessible from outside and can be modified directly
 \why It is more intuitive to work directly with the tree, some new algorithms work on the tree and are easier to implement that way.
\end{description}

\subsubsection{SplitLayoutManager}
\begin{description}
 \short New \src{SplitLayoutManager} calculates where to drop, and how to divide, elements of a \src{SplitDockStation}
 \why New features, like the locked size of \src{CDockable}, were only possible if the behavior of a \src{SplitDockStation} can be changed on runtime.
\end{description}

\subsubsection{CDockable resize lock}
\begin{description}
 \short The size of a \src{CDockable} can be locked during resize of its parent. See \src{setResizeLocked}, a method of \src{AbstractCDockable}.
 \why This was a request from a user
\end{description}

\subsubsection{FlapLayoutManager}
\begin{description}
 \short \src{FlapDockStation} now uses \src{FlapLayoutManager} to arrange its children
 \why Exchangeable behavior was a requirement for new features in the common-project.
\end{description}

\subsubsection{ColorManager/ColorScheme}
\begin{description}
 \short Many graphical elements now use \src{ColorManager} and \src{ColorSchemes}
 \why Colors can now be exchanged by clients. The control goes deep, even the color of a single element can be exchanged without affecting other elements of the same kind.
\end{description}

\subsubsection{ColorMap}
\begin{description}
 \short \src{CDockable} uses a \src{ColorMap} to define special colors for tabs and titles that are related to the \src{CDockable}
 \why This was a request from a user
\end{description}

\subsubsection{LookAndFeel}
\begin{description}
 \short Changes of \src{LookAndFeel} noted by \src{DockController} and forwarded to all \src{UIListeners}.
 \why Because the \src{ColorManager} would not be informed of the new \\\src{LookAndFeel} otherwise
\end{description}

\subsubsection{CDockable resize request}
\begin{description}
 \short \src{CDockable}s can now request a size they would like to have, and in most environments they will get this size. See the method \src{setResizeRequest} of \src{AbstractCDockable}.
 \why This was a request from a user
\end{description}

\section{Version 1.0.4}
Version 1.0.4 introduces a few new features that add customizability
\subsection{Incompatibilities}
These changes break with the API from 1.0.3, clients must change their interfaces in order to work properly.

\subsubsection{Binary file format}
\begin{description}
\short The binary file format has been changed
\why The format now includes version numbers so that backwards compatibility should be possible in the next versions
\clients Need to delete all binary files. They might try to write their properties with the old version in xml, and then load the xml file with the new version. This should convert the files.
\end{description}

\subsubsection{DockableListener}
\begin{description}
\short Has an additional method \src{titleExchanged}
\why Allows to exchange a \src{DockTitle} while the \src{Dockable} is visible
\clients Need to update any class that implements \src{DockableListener}.
\end{description}

\subsubsection{Title visibility on CDockables}
\begin{description}
\short Any \src{CDockable} can now hide its titles at any time
\why user request
\clients Need to update any class implementing \src{CDockablePropertyListener} since that listener has an additional method \src{titleShownChanged}.
\end{description}

\subsubsection{BasicDropDownButtonHandler}
\begin{description}
\short Requests now a \src{BasicDropDownButtonTrigger} instead of a \\\src{BasicTrigger}
\why to allow steering any drop down action with the keyboard.
\clients unlikly to have an effect on any client
\end{description}

\subsubsection{CDockable.getClose}
\begin{description}
\short Method has been moved into \src{CommonDockable}
\why The action can now be replaced through \src{CDockable.getAction}.\\There is no need for any client to replace the action by replacing the whole \src{DockActionSource}
\clients should use \src{putAction}, a method of \src{AbstractCDockable} to exchange the close-action. No fix for clients which added additional elements to the close-source.
\end{description}

\subsubsection{CLocation}
\begin{description}
\short Additional \src{CLocations}, some methods have been moved
\why To allow the new \src{CStation} more flexible \src{CLocation}s were needed.
\clients No general solution available, clients should recompile their project and check all compiler errors.
\end{description}

\subsubsection{working area}
\begin{description}
\short Every \src{CStation} can now be a working area
\why To allow more flexibility in grouping \src{CDockable}s
\clients That should not be visible for any client using version 1.0.3
\end{description}


\subsection{Features}
This is the set of new features.

\subsubsection{Border around BubbleDisplayer}
\begin{description}
 \short BubbleDisplayer now shows a border if the title is not null, or if the dockable is not a station
 \why Looks better
\end{description}

\subsubsection{Backup factories (core)}
\begin{description}
 \short \src{DockFrontend} and \src{PredefinedDockSituation} can now use backup factories. These factories are used to load elements which should be in the cache, but are missing. In case of \src{DockFrontend} they are automatically added to the frontend.
 \why Removes the need to add all \src{Dockable}s to a \src{DockFrontend} before loading a layout from a file.
\end{description}

\subsubsection{Backup factories (common)}
\begin{description}
 \short \src{CControl} now supports lazy initialisation of \src{SingleCDockable}s through the \src{SingleCDockableBackupFactory}.
 \why saves memory
\end{description}

\subsubsection{Unregister factories from DockFrontend}
\begin{description}
 \short \src{DockFactory}s can now be unregistered from \src{DockFrontend}
 \why Was missing
\end{description}

\subsubsection{Action support keyboard}
\begin{description}
 \short \src{DockAction}s are triggered by pressing SPACE on the focused button, \src{DropDownAction}s pop up when the DOWN (non numpad) key is pressed
 \why Ongoing work to allow navigating in DF without the mouse.
\end{description}

\subsubsection{FocusTraversalPolicies}
\begin{description}
 \short New \src{FocusTraversalPolicy}s allow to navigate within all elements of a \src{DockableDisplayer} (including title).
 \why Ongoing work to allow navigating in DF without the mouse.
\end{description}

\subsubsection{override predefined actions}
\begin{description}
 \short \src{CDockable} has an additional method \src{getAction} which is used by various modules to override their default actions.
 \why Answer to a user request
\end{description}

\subsubsection{CBlank}
\begin{description}
 \short New action \src{CBlank}, which does not show anything.
 \why As value for \src{CDockable.getAction} when a predefined action should be hidden
\end{description}

\subsubsection{CStation}
\begin{description}
 \short Additional interface \src{CStation} in common. Two new stations: \\\src{CMinimizeArea} and \src{CGridArea}.
 \why Allows clients to add their own \src{DockStation}s to \src{CControl}, allows to create other layouts than the
 "one center, four minimize areas"-layout.
\end{description}

\subsection{Bugfixes}
These are the bugs that were fixed/

\subsubsection{BubbleDisplayer.getDockableInsets}
\begin{description}
 \short The method did not calculate its result correctly.
 \why A flaw in the design of \src{BasicDockableDisplayer}
\end{description}

\subsubsection{IndexOutOfBoundsException from ButtonPanel}
\begin{description}
 \short The exception was thrown when an invisible action was on the panel
 \why invisible actions were not considered when writing \src{ButtonPanel}
\end{description}

\subsubsection{Mode change of CDockable}
\begin{description}
 \short \src{CDockable} did not go into normalized-mode when externalized and never normalized before
 \why Properties were missing and could not be created automatically
\end{description}

\subsubsection{Opening maximized CDockable}
\begin{description}
 \short \src{CDockable} could not be opened maximized.
 \why framework got confused because \src{CDockable} did not have a parent.
\end{description}

\subsubsection{Unbind of DockAction called to often}
\begin{description}
 \short A \src{DockAction} could throw an exception "unbind called to often"
 \why When a \src{DockAction} was a child of a \src{MenuMenuHandler}, its \src{unbind} method was called even if the action was not displayed. However the \src{bind} action was called only if the action was displayed, so the internal counter was no longer correct. Every time a menu with such an action was shown, the counter was decremented by one. When it reached a value below 0, an exception was thrown. Since an action could be bound by many elements, the exception occured at random places.
\end{description}

\section{Version 1.0.5}
Version 1.0.5 brings the possibility to navigate around only by hitting some keys on the keyboard. When clicking the \src{ctrl+shift+e} combination, a dialog opens on which a \src{Dockable} can be selected.

\src{DockAction}s in button form can be activated with \src{space}, and the dropdown actions menu can be opened with the \src{arrow down} key.

This release contains some tricky incompatibilities which need to be handled very carefully.

\subsection{Incombatibilities}
The changes that need special care.

\subsubsection{DockStationListener}
\begin{description}
 \short The method \src{dockableSelected} of \src{DockStationListener} has an additional parameter that indicates which element was selected before the change.
 \why No need for listeners to store the old values.
 \clients Must carefully update all classes and interfaces that implement \\\src{DockStationListener}. Be especially careful not to mix up the new arguments with the old ones.
\end{description}

\subsubsection{DockableFocusListener}
\begin{description}
 \short The \src{DockableFocusListener} has been divided into two interfaces: \\\src{DockableFocusListener} and \src{DockableSelectionListener}. The\\remaining method in \src{DockableFocusListener} now takes a \\\src{DockableFocusEvent} and no longer directly the involved elements. The class \src{DockableFocusAdapter} has been deleted.
 \why Events allow further changes of the system without change of the \src{DockableFocusListener} itself. Since every client needs to update its methods anyway, \src{DockableFocusAdapter} could be deleted.
 \clients Should use \src{DockableFocusListener} instead of \\\src{DockableFocusAdapter}.
\end{description}

\subsubsection{DockTheme.getDockableSelection}
\begin{description}
 \short \src{DockTheme} has an additional method \src{getDockableSelection}.
 \why A \src{DockableSelection} is needed to change the focused \src{Dockable} using only the keyboard. Since \src{DockableSelection} is a graphical element, it has to be handled by the \src{DockTheme}.
 \clients Should implement the missing method in their \src{DockTheme}s. Using \src{DefaultDockableSelection} is an easy solution.
\end{description}

\subsubsection{tap-strip no longer painted by TapPainter}
\begin{description}
 \short \src{TabPainter} does no longer paint the tab-strip directly. It now creates a \src{TabStripPainter} that paints the strip.
 \why The new object can work with the color map.
 \clients Have to provide a \src{TabStripPainter} as well.
\end{description}

\subsubsection{KeyboardController does fire less events}
\begin{description}
 \short The \src{KeyboardController} does no longer fire events when it could not find the source-\src{Dockable} of the event. As a result the \src{KeyboardListener} does no longer receive \src{null} as argument of any of its methods.
 \why Events were fired which had nothing to do with the framework at all.
 \clients If they need all key events, then they can add a global \src{KeyListener} to \src{KeyboardController} using the method \src{addGlobalListener}.
\end{description}

\subsubsection{ComponentHierarchyObserver}
\begin{description}
 \short The \src{ComponentHierarchyObserver} includes more \src{Components} in its search. The \src{ComponentHierarchyObserverListener} now works with an event and does no longer receive all the elements as arguments.
 \why Allows more features to work correctly in restricted environments.
 \clients Need to be aware that not every \src{Component} that is found by the observer is a child of a \src{Dockable}.
\end{description}


\subsection{API and Layout}
A list of new API elements and changes that affect the layout.

\subsubsection{KeyStroke for closing Dockable}
\begin{description}
 \short The \src{KeyStroke} for closing a \src{CDockable} or \src{Dockable} has been changed from \src{ctrl+c} to \src{ctrl+F4}.
 \why Andrew pointed out, that \src{ctrl+c} is already used by many applications...
\end{description}

\subsubsection{New listeners}
\begin{description}
 \short There are new listeners, \src{CFocusListener}, \src{CKeyboardListener} and \\\src{CDoubleClickListener}, which can be added to \src{CDockable} or to \\\src{CControl} if all \src{CDockable}s should be monitored.
 \why Might be helpful for some applications
\end{description}

\subsubsection{ComponentHierarchObserver}
\begin{description}
 \short Clients can now add and remove \src{Component}s from the \\\src{ComponentHierarchyObserver}. The observer also includes \src{DockTitle}s in its search for \src{Component}s.
 \why Might become necessary for complex applications that run in a restricted environment.
\end{description}

\subsubsection{Root window for DockController}
\begin{description}
 \short The \src{DockController} can now find the root window of the application. The window can also be set directly using \src{setRootWindow}. If so, then the root window is added to the \src{ComponentHierarchyObserver}.
 \why Necessary to show small dialogs like the new \src{DockableSelector}
\end{description}

\subsubsection{FocusTraversalPolicies}
\begin{description}
 \short All \src{DockTheme}s now support \src{FocusTraversalPolicies}. Now each \\\src{DockAction} and all \src{Component}s of a \src{Dockable} can be reached by using only the keyboard.
 \why A nice feature for people which do not like the mouse
\end{description}

\subsubsection{Dialog to select focused Dockable}
\begin{description}
 \short The \src{DockableSelector} and \src{DockableSelection} allow users to select the focused \src{Dockable} using only the keyboard. The feature is activated as soon as \src{ctrl+shift+e} is pressed.
 \why A nice feature for people which do not like the mouse
\end{description}

\subsubsection{Extracting colors from LookAndFeel}
\begin{description}
 \short The mechanism to read colors from \src{LookAndFeel}s has been upgraded. Each \src{LookAndFeel} can now have its own specialized \src{LookAndFeelColors} that reads the colors.
 \why Allows to be more flexible with colors, allows the correct use of Nimbus and Windows.
\end{description}

\subsubsection{EclipseTheme}
\begin{description}
 \short \src{EclipseTheme} uses more colors from the \src{LookAndFeel}
 \why looks better
\end{description}

\subsubsection{SplitDockStation}
\begin{description}
 \short When dropping an element onto a \src{SplitDockStation}, the elements that are put aside receive at least a quarter of their original size.
 \why Sometimes the old elements shrunk too mutch.
\end{description}

\subsection{Bugfixes}
\subsubsection{Missing colors for BasicTheme}
\begin{description}
 \short \src{BasicTheme} did not update colors for the keys \src{paint.line}, \src{paint.divider} and \src{paint.division}. As a result some painting was not as in the older versions.
\end{description}

\subsubsection{Cutting bounds of children of SplitDockStation}
\begin{description}
 \short The bounds of children of \src{SplitDockStation} are now cut such that they are always within the stations boundaries.
 \why Rounding errors sometimes lead to little failures that made a single line of pixels invisible.
\end{description}

\subsubsection{NullPointerException when changing focus}
\begin{description}
 \short A \src{NullPointerException} could been thrown when the focus changed.
\end{description}

\subsubsection{Undecorated dialogs not undecorated}
\begin{description}
 \short When using \src{LookAndFeel}s that can draw window decorations on their own (like JTattoo), then \src{FlapWindow}, \src{ScreenDockDialog} and others\\could have decorations.
 \why The flag that advices the \src{LookAndFeel} not to paint a decoration was not set in the \src{JRootPane}s of these windows.
\end{description}

\subsubsection{RexTabbedComponent not adding/removing children}
\begin{description}
 \short \src{RexTabbedComponent} does no longer add and remove its children to change their visibility, it now uses a \src{CardLayout}.
 \why Some \src{Component}s did miss the change of the \src{LookAndFeel} when they were a child of \src{RexTabbedComponent}.
\end{description}

\subsubsection{Focusing a hidden CDockable}
\begin{description}
 \short When focusing a normalized \src{CDockable} that was hidden behind a maximized \src{CDockable}, then the focused dockable did not became visible.
 \why An old security system prevents change of the maximized element by the focus system.
\end{description}

\subsubsection{Missing events when changing state of CDockable}
\begin{description}
 \short When the \src{ExtendedMode} of a \src{CDockable} did not change because of a call of a special method, no state-change-events were fired.
 \why It was not intended that one action could change the state of many \src{CDockable}s.
\end{description}

\section{Version 1.0.6}
This version brings the preference system. The API was changed at some places in order to bring the preference system to work.

\subsection{Incombatibilities}
The changes that need special care.

\subsubsection{Dockable with Tooltip}
\begin{description}
 \short \src{Dockable} has a new method \src{getTitleToolTip}. \src{DockableListener} has a new method \src{titleToolTipChanged}.
 \why Allows to show a tooltip for a \src{Dockable} on titles and on tabs.
 \clients Must implement the two new methods.
\end{description}

\subsubsection{ColorManager generalized}
\begin{description}
 \short \src{ColorManager} extends \src{UIProperties}, \src{ColorProvider} is replaced by \src{ColorBridge} which extends \\\src{UIBridge}, \src{DockColor} extends \src{UIValue}. \\\src{ColorManager.getProviderFor} is replaced by \\\src{UIProperties.getBridgeFor}. Bridges and Values are no longer connected though the class of the \src{UIValue} but by a \src{Path} object. These objects are much more flexibel than classes and not hard to understand.
 \why This generalization will allow to use the \src{UIProperties} for other things than just colors. There are plans to use the same system for fonts as well.
 \clients Should replace \src{ColorProvider} by \src{UIBridge}
\end{description}

\subsubsection{Resize Request in Common}
\begin{description}
 \short Size requests are now handled by \src{RequestDimension} and no longer with \src{Dimension}.
 \why Allows to issue requests only for with or for height.
 \clients Have to replace occurences of \src{Dimension} by \src{RequestDimension}.
\end{description}

\subsubsection{DockElementRepresentative}
\begin{description}
 \short \src{Dockable} and \src{DockTitle} implement the interface \\\src{DockElementRepresentative}
 \why Allows unified access to all \src{Component}s which are linked to a \src{Dockable}.
 \clients Have to implement the additional methods of \\\src{DockElementRepresentative}
\end{description}

\subsubsection{SimpleModifierMask deleted}
\begin{description}
 \short The class \src{SimpleModifierMask} has been removed. The interface \\\src{ModifierMask} has been changed to be
a class effectivly replacing \\\src{SimpleModifierMask}.
 \why This was necessary for the preference system. It was also unlikely that a client would ever implement \src{ModifierMask}.
 \clients Must replace \src{SimpleModifierMask} by \src{ModifierMask}.
\end{description}

\subsubsection{Map of DockThemes}
\begin{description}
 \short \src{CControl} has now a \src{ThemeMap}. This map contains \src{String}-\\\src{ThemeFactory} pairs. A new theme can be activated by calling \src{ThemeMap.select}.
 \why This is a simple representation of all the choices a user can do. The \src{CThemeMenuPiece} and the preference system can use the map to show choices and selection.
 \clients Instead of using \src{CControl.setTheme( DockTheme )} they should use \src{CControl.setTheme( String )}. Additinal \src{ThemeFactory}s have to be added directly to the \src{ThemeMap}, \src{CThemeMenuPiece} does no longer support inserting factories.
\end{description}

\subsubsection{Persistent storage of DockTheme}
\begin{description}
 \short The \src{DockTheme} of a \src{CControl} is no longer stored by the \\\src{CThemeMenuPiece} but directly by its \src{ThemeMap}.
 \why The \src{ThemeMap} is always present, the \src{CThemeMenuPiece} not. Hence if the \src{ThemeMap} is responsible for storing the theme, then the theme gets always stored.
 \clients Cannot do anything. The setting of the theme will be lost the next time the application starts and has to be set anew.
\end{description}



\subsection{API and Layout}
A list of new API elements and changes that affect the layout.

\subsubsection{Dropping onto SplitDockStation}
\begin{description}
 \short When dropping something onto a \src{SplitDockStation}, the old content always gets at least 25\% of the remaining space.
 \why In some situations the old content get no space and became invisible.
\end{description}

\subsubsection{UIProperties}
\begin{description}
 \short New \src{UIProperties}, a generalisation of \src{ColorManager}.
 \why Precondition to implement a similar system for fonts.
\end{description}

\subsubsection{Opened LockedResizeLayoutManager}
\begin{description}
 \short The private inner classes of \src{LockedResizeLayoutManager} have been made public and top level.
 \why Clients have better access and can better customize \\\src{LockedResizeLayoutManager}.
\end{description}

\subsubsection{ConflictResolver for locked resize}
\begin{description}
 \short The \src{ConflictResolver} in Common can now be used to resolve conflicts on resize when locked \src{CDockables} are around. Can be applied using the key \src{CControl.RESIZE_LOCK_CONFLICT_RESOLVER}.
 \why Developers wished to have the choice between different behaviors.
\end{description}

\subsubsection{FullLockConflictResolver}
\begin{description}
 \short A new \src{ConflictResolver} which is inspired by the behavior of VLDocking
 \why User request
\end{description}

\subsubsection{DockElementRepresentative}
\begin{description}
 \short New interface \src{DockElementRepresentative}. Creates a link between a \src{Component} and a \src{DockElement}.
 \why Gives a unified way to handle popup menus and drag and drop operations.
\end{description}

\subsubsection{Common: close-action and setVisible}
\begin{description}
 \short Clicking onto the close-action and calling \src{setVisible( false )} on a \src{CDockable} will now have the exact same effects.
 \why Seems to be reasonable that the close action just calls \src{setVisible}.
\end{description}

- API: new preferences package, includes new MenuPieces

\subsubsection{Preference system}
\begin{description}
 \short A new system has been put in place to handle preferences. This new system is located in the package \src{bibliothek.extension.gui.dock}.
 \why This new system allows users to see and change various properties of the library. This includes things like the shortcuts for actions (like ctrl+m for maximizing a \src{Dockable}) or which colors are used by \src{BubbleTheme}. Future releases might contain more preferences.
\end{description}

\subsubsection{ColorScheme as property}
\begin{description}
 \short \src{BasicTheme} and subclasses read their \src{ColorScheme} from the \\\src{DockProperties}.
 \why a condition for the preference system
\end{description}

\subsubsection{Default locations in Common}
\begin{description}
 \short Clients can set the default location of a \src{Dockable} in Common. The method \src{setLocation} of \src{CStateManager} can be used for that. Also \\\src{AbstractCDockable} has a new method \src{setDefaultLocation} which can be used even if the element is not yet added to a \src{CControl}.
 \why user request.
\end{description}

\subsubsection{Borders on OverpaintablePanel}
\begin{description}
 \short \src{OverpaintablePanel} now supports \src{Border}s.
 \why Every \src{Component} should support \src{Border}s.
\end{description}

\subsection{Bugfixes}

\subsubsection{DefaultConflictResolver did not respect locked sizes}
\begin{description}
 \short When several \src{ResizeRequest}s with different priority had to be handled, \src{DefaultConflictResolver} did not respect all of them. The algorithm has been fixed.
\end{description}

\subsubsection{Opening maximized CDockable}
\begin{description}
 \short When opening a \src{CDockable} which would stack on a maximized \\\src{CDockable}, then the layout could get scrambled. The solution is now to unmaximize any \src{CDockable}, then add the new element, then re-maximize the \src{CDockable}s.
\end{description}

\subsubsection{Dropping Dockable on SplitDockStation}
\begin{description}
 \short \src{Dockable}s can now be dropped onto \src{SplitDockStation}s which have size 0/0. In earlier versions the divider between \src{Dockable}s had a fixed size in pixels. Now the size of the divider is set to 0 if the \src{SplitDockStation} is too small. This prevents children to have negative sizes.
\end{description}

\subsubsection{CSplitLocation broken}
\begin{description}
 \short \src{CSplitLocation.expandProperty} did process the first element of a tree-path twice (thanks srcnick for fixing this bug).
\end{description}

\subsubsection{CStateManager.getLocation broken}
\begin{description}
 \short \src{CStateManager.getLocation} did return \src{null} when it should produce a result. There were also some \src{CLocation}s which did not return the correct result causing \src{getLocation} to fail.
\end{description}

- Bugfix: Moving away from EclipseTheme could left some Dockables invisible
\subsubsection{Stack-component of EclipseTheme broken}
\begin{description}
 \short When removing all elements of \src{EclipseStackDockComponent}, some elements could remain invisible.
\end{description}
\end{document}
